# Create namespace `inside-mesh` and enable automatic Istio sidecar
# injection for pods deployed in this namespace
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    istio-injection: enabled
  name: inside-mesh


# Create mesh-wide policy to allow only mutual TLS connections
# Note that MeshPolicy is not namespaced resource
---
apiVersion: "authentication.istio.io/v1alpha1"
kind: "MeshPolicy"
metadata:
  name: "default"
spec:
  peers:
  - mtls: {}


# create ServiceEntry for external service
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: httpbin-external
  namespace: inside-mesh
spec:
  hosts:
  - httpbin.org
  ports:
  - number: 443
    name: http-port-for-tls-origination
    protocol: HTTPS
  resolution: DNS


# create VirtualService that will rewrite the request
# by forwarding inbound port 80 HTTP to port 443
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbin-external
  namespace: inside-mesh
spec:
  hosts:
  - httpbin.org
  http:
  - match:
    - port: 80
    route:
    - destination:
        host: httpbin.org
        port:
          number: 443


# create DestinationRule that will enforce TLS towards the external service
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: httpbin-external
  namespace: inside-mesh
spec:
  host: httpbin.org
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    portLevelSettings:
    - port:
        number: 443
      tls:
        mode: SIMPLE # initiates HTTPS when accessing httpbin.org
        sni: httpbin.org  # SNI needs to be set in outbound TLS connection if target service requires it - httpbin.org does


# Deploy client to inside-mesh namespace
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: inside-mesh
  labels:
    app: client
spec:
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      labels:
        app: client
    spec:
      containers:
      - name: client
        image: client
        imagePullPolicy: Never
        command: ["/bin/sleep"] # run sleep so that the pod will remain running and we can "exec" into it to run http client
        args: ["999999999"]
