# Create namespace `inside-mesh` and enable automatic Istio sidecar
# injection for pods deployed in this namespace
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    istio-injection: enabled
  name: inside-mesh


# Create mesh-wide policy to allow only mutual TLS connections
# Note that MeshPolicy is not namespaced resource
---
apiVersion: "authentication.istio.io/v1alpha1"
kind: "MeshPolicy"
metadata:
  name: "default"
spec:
  peers:
  - mtls: {}


# Traffic destined to *.local (any service within the cluster) will be
# put into mutually authenticated TLS pipe managed by Istio.
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: default
  namespace: inside-mesh
spec:
  host: "*.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL


# Enable istio authorization
# Note that RbacConfig is namespaced resource but only single
# mesh-wide instance should be created
---
apiVersion: "rbac.istio.io/v1alpha1"
kind: RbacConfig
metadata:
  name: default
  namespace: istio-system
spec:
  mode: 'ON'


# Create role that allows access to pod with label app=httpbin
---
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRole
metadata:
  name: httpbin-user
  namespace: inside-mesh
spec:
  rules:
  - services: ["*"]
    methods: ["*"]
    paths: ["/status/*","/headers"]
    constraints:
    - key: "destination.labels[app]"  # see constraints in https://istio.io/docs/reference/config/authorization/constraints-and-properties/
      values: ["httpbin"]


# Create service account
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: myserviceaccount
  namespace: inside-mesh


# Create role binding for the service account
---
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRoleBinding
metadata:
  name: book-reader
  namespace: inside-mesh
spec:
  subjects:
  - user: "cluster.local/ns/inside-mesh/sa/myserviceaccount"
  roleRef:
    kind: ServiceRole
    name: "httpbin-user"


# Deploy httpbin service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
  namespace: inside-mesh
  labels:
    app: httpbin
spec:
  selector:
    matchLabels:
      app: httpbin
  template:
    metadata:
      labels:
        app: httpbin
    spec:
      containers:
      - name: httpbin
        image: httpbin
        imagePullPolicy: Never
        ports:
          - containerPort: 80


# Expose as service
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  namespace: inside-mesh
  labels:
    app: httpbin
spec:
  ports:
  - name: http
    port: 80
  selector:
    app: httpbin


# Deploy two instances of client
#  - client1 with default service account
#  - client2 with service account "myserviceaccount"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client1
  namespace: inside-mesh
  labels:
    app: client1
spec:
  selector:
    matchLabels:
      app: client1
  template:
    metadata:
      labels:
        app: client1
    spec:
      containers:
      - name: client
        image: client
        imagePullPolicy: Never
        command: ["/bin/sleep"] # run sleep so that the pod will remain running and we can "exec" into it to run http client
        args: ["999999999"]

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client2
  namespace: inside-mesh
  labels:
    app: client2
spec:
  selector:
    matchLabels:
      app: client2
  template:
    metadata:
      labels:
        app: client2
    spec:
      containers:
      - name: client
        image: client
        imagePullPolicy: Never
        command: ["/bin/sleep"] # run sleep so that the pod will remain running and we can "exec" into it to run http client
        args: ["999999999"]
      serviceAccountName: myserviceaccount
