# Create namespace `inside-mesh` and enable automatic Istio sidecar
# injection for pods deployed in this namespace
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    istio-injection: enabled
  name: inside-mesh


# Create mesh-wide policy to allow only mutual TLS connections.
# Note that MeshPolicy is not namespaced resource
---
apiVersion: "authentication.istio.io/v1alpha1"
kind: "MeshPolicy"
metadata:
  name: "default"
spec:
  peers:
  - mtls: {}


# Traffic destined to *.local (any service within the cluster) will be
# put into mutually authenticated TLS pipe managed by Istio.
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: default
  namespace: inside-mesh
spec:
  host: "*.local" # any service running within cluster
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL


# Deploy httpbin service that implements REST API at port 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
  namespace: inside-mesh
  labels:
    app: httpbin
spec:
  selector:
    matchLabels:
      app: httpbin
  template:
    metadata:
      labels:
        app: httpbin
    spec:
      containers:
      - name: httpbin
        image: httpbin
        imagePullPolicy: Never
        ports:
          - containerPort: 80


# Expose the REST API as a service
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  namespace: inside-mesh
  labels:
    app: httpbin
spec:
  ports:
  - name: http
    port: 80
  selector:
    app: httpbin


# Configure gateway, which acts as a loadbalancer operating at the
# edge of mesh
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: mygateway
  namespace: inside-mesh
spec:
  selector:
    istio: ingressgateway # use istio default ingress gateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: MUTUAL  # terminate TLS in gateway, require client certificate

      # istio-ingressgateway pod mounts certificate, key and client CA
      # certificate from Secrets that were pre-provisioned in
      # provisioning/prepare-demo.sh
      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
      privateKey: /etc/istio/ingressgateway-certs/tls.key
      caCertificates: /etc/istio/ingressgateway-ca-certs/client-root.pem

      # Note that besides validating that client certificate is issued
      # by a trusted CA, it provides option to whitelist clients by
      # the SAN of client certiifcate but it does not provide option
      # to validate e.g. CN in Subject Name.  Further documentation:
      #
      #   - https://istio.io/docs/reference/config/istio.networking.v1alpha3/#Server-TLSOptions
      #   - https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/auth/cert.proto#envoy-api-msg-auth-certificatevalidationcontext
      #
      # subjectAltNames: <list-of-names>
    hosts:
    - "*"  # accept any incoming request, we do not require TLS SNI to be set


# Configure routing from gateway to the actual Service
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbin
  namespace: inside-mesh
spec:
  hosts:
  - "*"  # accept any incoming request, we do not require "Host:" HTTP header to be set
  gateways:
  - mygateway
  http:
  - route:
    - destination:
        host: httpbin  # interpreted as httpbin.inside-mesh.svc.cluster.local
