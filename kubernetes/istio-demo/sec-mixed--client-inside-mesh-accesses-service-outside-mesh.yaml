# Create namespace `inside-mesh` and enable automatic Istio sidecar
# injection for pods deployed in this namespace
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    istio-injection: enabled
  name: inside-mesh


# Create namespace `outside-mesh` for services outside the mesh
---
apiVersion: v1
kind: Namespace
metadata:
  name: outside-mesh


# Create mesh-wide policy to allow only mutual TLS connections
# Note that MeshPolicy is not namespaced resource
---
apiVersion: "authentication.istio.io/v1alpha1"
kind: "MeshPolicy"
metadata:
  name: "default"
spec:
  peers:
  - mtls: {}


# Traffic within namespace allocated to service mesh will be
# put into mutually authenticated TLS pipe managed by Istio.
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: default
  namespace: inside-mesh
spec:
  # Default rule causes Istio to use its own TLS for all services, so
  # exceptions are needed (see second DestinationRule below) to
  # disable Istio TLS for services outside the mesh
  host: "*.local"

  # Alternatively we can configure Istio TLS for specific namespace
  #only host: "*.inside-mesh.svc.cluster.local"

  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL


# Disable Istio TLS for services outside mesh
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: httpbin
  namespace: inside-mesh
spec:
  host: "*.outside-mesh.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: DISABLE


# Deploy httpbin service that implements REST API at port 443 (HTTPS)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
  namespace: outside-mesh
  labels:
    app: httpbin
spec:
  selector:
    matchLabels:
      app: httpbin
  template:
    metadata:
      labels:
        app: httpbin
    spec:
      containers:
      - name: httpbin
        image: httpbin
        imagePullPolicy: Never
        ports:
          - containerPort: 443
        volumeMounts:
        - mountPath: /run/secrets/certs/
          name: httpbin-certs
          readOnly: true
        command: ["/bin/sh"]
        # Configure Gunicorn HTTP server to terminate TLS
        #   - server certificate and key
        #   - require client certificate and validate against trusted CA cert
        #     (--cert-reqs 2 == ssl.CERT_REQUIRED)
        args: ["-c", "gunicorn -b 0.0.0.0:443 --access-logfile - --certfile /run/secrets/certs/httpbin.pem --keyfile /run/secrets/certs/httpbin-key.pem --cert-reqs 2 --ca-certs /run/secrets/certs/client-root.pem httpbin:app"]
      volumes:
      - name: httpbin-certs
        secret:
          secretName: httpbin-certs


# Deploy httpbin service that implements REST API at port 80 (HTTP)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin-notls
  namespace: outside-mesh
  labels:
    app: httpbin-notls
spec:
  selector:
    matchLabels:
      app: httpbin-notls
  template:
    metadata:
      labels:
        app: httpbin-notls
    spec:
      containers:
      - name: httpbin-notls
        image: httpbin
        imagePullPolicy: Never
        ports:
          - containerPort: 80
        command: ["/bin/sh"]
        args: ["-c", "gunicorn -b 0.0.0.0:80 httpbin:app"]


# Deploy client to inside-mesh namespace
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: inside-mesh
  labels:
    app: client
spec:
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      labels:
        app: client
    spec:
      containers:
      - name: client
        image: client
        imagePullPolicy: Never
        volumeMounts:
        - mountPath: /run/secrets/certs/
          name: client-certs
          readOnly: true
        command: ["/bin/sleep"] # run sleep so that the pod will remain running and we can "exec" into it to run http client
        args: ["999999999"]
      volumes:
      - name: client-certs
        secret:
          secretName: client-certs


# Expose the REST APIs as a services
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  namespace: outside-mesh
  labels:
    app: httpbin
spec:
  ports:
  - name: https
    port: 443
  selector:
    app: httpbin
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin-notls
  namespace: outside-mesh
  labels:
    app: httpbin-notls
spec:
  ports:
  - name: http
    port: 80
  selector:
    app: httpbin-notls

