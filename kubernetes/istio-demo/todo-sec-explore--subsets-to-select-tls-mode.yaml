#
# https://istio.io/help/ops/setup/injection/
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    istio-injection: enabled
  name: demo


# Create mesh-wide policy to allow only mutual TLS connections
# Note that MeshPolicy is not namespaced resource
---
apiVersion: "authentication.istio.io/v1alpha1"
kind: "MeshPolicy"
metadata:
  name: "default"
spec:
  peers:
  - mtls: {}


---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: default
  namespace: demo
spec:
  host: "*.local"
#  trafficPolicy:
#    tls:
#      mode: ISTIO_MUTUAL
  subsets:
# TODO:  THIS DOES NOT WORK: subset inherits top level TLS mode
# and if removing top level, they have no effect.
# see also command "istioctl authn tls-check" for current TLS status
  - name: inside-mesh
    labels:
      istio: enabled
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
  - name: outside-mesh
    labels:
      istio: disabled
    trafficPolicy:
      tls:
        mode: DISABLE


# Deploy httpbin service twice, once with proxy and once without
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin-without-proxy
  namespace: demo
  labels:
    app: httpbin-without-proxy
spec:
  selector:
    matchLabels:
      app: httpbin-without-proxy
  template:
    metadata:
      labels:
        app: httpbin-without-proxy
        istio: disabled
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: httpbin
        image: httpbin
        imagePullPolicy: Never
        ports:
          - containerPort: 80
        command: ["/bin/sh"]
        args: ["-c", "gunicorn -b 0.0.0.0:80 httpbin:app"]


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin-with-proxy
  namespace: demo
  labels:
    app: httpbin-with-proxy
spec:
  selector:
    matchLabels:
      app: httpbin-with-proxy
  template:
    metadata:
      labels:
        app: httpbin-with-proxy
        istio: enabled
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      containers:
      - name: httpbin
        image: httpbin
        imagePullPolicy: Never
        ports:
          - containerPort: 80
        command: ["/bin/sh"]
        args: ["-c", "gunicorn -b 0.0.0.0:80 httpbin:app"]


# Expose the REST APIs as a services
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin-without-proxy
  namespace: demo
  labels:
    app: httpbin-without-proxy
spec:
  ports:
  - name: http
    port: 80
  selector:
    app: httpbin-without-proxy


---
apiVersion: v1
kind: Service
metadata:
  name: httpbin-with-proxy
  namespace: demo
  labels:
    app: httpbin-with-proxy
spec:
  ports:
  - name: http
    port: 80
  selector:
    app: httpbin-with-proxy


# Deploy client
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: demo
  labels:
    app: client
spec:
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      labels:
        app: client
    spec:
      containers:
      - name: client
        image: client
        imagePullPolicy: Never
        command: ["/bin/sleep"] # run sleep so that the pod will remain running and we can "exec" into it to run http client
        args: ["999999999"]
